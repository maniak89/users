// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package storage

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type userViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *userViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("users").
func (v *userViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *userViewType) Columns() []string {
	return []string{
		"id",
		"login",
		"password",
		"created_at",
		"updated_at",
		"last_login",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *userViewType) NewStruct() reform.Struct {
	return new(User)
}

// UserView represents users view or table in SQL database.
var UserView = &userViewType{
	s: parse.StructInfo{
		Type:    "User",
		SQLName: "users",
		Fields: []parse.FieldInfo{
			{Name: "ID", Type: "string", Column: "id"},
			{Name: "Login", Type: "string", Column: "login"},
			{Name: "Password", Type: "string", Column: "password"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
			{Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"},
			{Name: "LastLogin", Type: "time.Time", Column: "last_login"},
		},
		PKFieldIndex: -1,
	},
	z: new(User).Values(),
}

// String returns a string representation of this struct or record.
func (s User) String() string {
	res := make([]string, 6)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "Login: " + reform.Inspect(s.Login, true)
	res[2] = "Password: " + reform.Inspect(s.Password, true)
	res[3] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[4] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	res[5] = "LastLogin: " + reform.Inspect(s.LastLogin, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *User) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.Login,
		s.Password,
		s.CreatedAt,
		s.UpdatedAt,
		s.LastLogin,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *User) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.Login,
		&s.Password,
		&s.CreatedAt,
		&s.UpdatedAt,
		&s.LastLogin,
	}
}

// View returns View object for that struct.
func (s *User) View() reform.View {
	return UserView
}

// check interfaces
var (
	_ reform.View   = UserView
	_ reform.Struct = (*User)(nil)
	_ fmt.Stringer  = (*User)(nil)
)

func init() {
	parse.AssertUpToDate(&UserView.s, new(User))
}
